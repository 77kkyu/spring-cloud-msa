buildscript {
    ext {
        springBootVersion = '2.4.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
    }
}

allprojects {

}

subprojects {

    ext {
        set('springCloudVersion', "2020.0.4")
    }

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}

project(':module-common') {
    // 향후 common 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {
        //implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'io.jsonwebtoken:jjwt:0.9.1'
    }
}

project(':module-search') {
    // 향후 user 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {
        //implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation project(path: ":module-common")

    }
}

project(':module-board') {
    // 향후 board 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {
        //implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation project(path: ":module-common")
    }
}